#!/bin/bash

## RNA Research Pipeline
## Copyleft 2017 Institut Curie
## Author(s): Nicolas Servant
## Contact: nicolas.servant@curie.fr
## This software is distributed without any guarantee under the terms of the GNU General
## Public License, either Version 2, June 1991 or Version 3, June 2007.

SOFT="RNApip"
VERSION="0.0.6"

function usage {
    echo -e "usage : $SOFT -f FORWARD -o OUTPUT -c CONFIG [-r REVERSE][-s SAMPLE_ID] [-d] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   -f|--forward INPUT: input forward fastq file"
    echo "   -o|--output OUTPUT: output folder"
    echo "   -c|--conf CONFIG: configuration file for RNA processing"
    echo "   [-r|--reverse INPUT]: input reverse fastq file"
    echo "   [-s|--sample ID]: sample ID"
    echo "   [-d|--dryrun]: dry run mode"
    echo "   [-h|--help]: help"
    echo "   [-v|--version]: version"
    exit;
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}

function set_dry_run {
    DRY_RUN=1
}

function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

if [ $# -lt 1 ]
then
    usage
    exit
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--reverse") set -- "$@" "-r" ;;
      "--forward") set -- "$@" "-f" ;;
      "--output") set -- "$@" "-o" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--sample")   set -- "$@" "-s" ;;
      "--dryrun")   set -- "$@" "-d" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts "f:r:o:c:s:hvd" OPT
do
    case $OPT in
        f) FORWARD=$OPTARG;;
	r) REVERSE=$OPTARG;;
	o) ODIR=$OPTARG;;
	c) CONF=$OPTARG;;
	s) SAMPLE_ID=$OPTARG;;
	d) set_dry_run ;;
	v) version ;;
	h) help ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	     exit 1
	     ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done


if [[ -z $FORWARD || -z $ODIR || -z $CONF ]]; then
    usage
    exit
fi

## Set PATHS
BIN_PATH=`dirname $0`
ABS_BIN_PATH=`cd "$BIN_PATH"; pwd`
SCRIPTS_PATH="$ABS_BIN_PATH/../scripts/"

## Load functions file
. $SCRIPTS_PATH/utils.inc.sh
. $SCRIPTS_PATH/rna.inc.sh

#####################
## Check Config file
#####################

if [ ! -z "$CONF" ]; then
    CONF=`abspath $CONF`
    if [ -e "$CONF" ]; then
        read_config $CONF
    else
        echo "Error - config file '$CONF' not found"
        exit
    fi
fi

## TODO - check all paths before starting

## LOGS
if [[ -z $SAMPLE_ID ]]; then 
    LOGDIR=${ODIR}/logs/
else
    LOGDIR=${ODIR}/logs/${SAMPLE_ID}
fi
mkdir -p ${LOGDIR}


###################
## WORFLOW
###################

## 0- echo
echo -e "--------------------"
echo -e "Running ${SOFT} v${VERSION} ..."
when=$(date +%Y-%m-%d)
echo -e "When=${when}"
where=$(hostname)
echo -e "Where=${where}"
echo -e "Input=${FORWARD} ${REVERSE}"
echo -e "Ouput=${ODIR}"
echo -e "Config=${CONF}"
if [[ ! -z $SAMPLE_ID ]]; then
    echo -e "SampleID=${SAMPLE_ID}"
fi
echo -e "--------------------"
echo 

## 1- FASTQC

fastqc_func "${FORWARD} ${REVERSE}" ${ODIR} ${LOGDIR}

## 2- Mapping - remove rRNA

rRNA_mapping_func "${FORWARD} ${REVERSE}" ${ODIR} ${LOGDIR}

R_RNA_BAM=${ODIR}/rRNA_mapping/$(basename ${FORWARD} | sed -e 's/.fastq\(.gz\)*/.bam/')

# rename unmapped read output (bowtie automatically adds _1 and _2 for PE reads
if [[ -z ${REVERSE} ]]; then
    FORWARD_RRNA=${ODIR}/rRNA_mapping/$(basename ${FORWARD} | sed -e 's/.fastq/_norRNA.fastq/')
else
    FORWARD_RRNA=${ODIR}/rRNA_mapping/$(basename ${FORWARD} | sed -e 's/.fastq/_norRNA_1.fastq/')
    REVERSE_RRNA=${ODIR}/rRNA_mapping/$(basename ${FORWARD_RRNA} | sed -e 's/_1.fastq/_2.fastq/')
fi

## 3 - Mapping

if [ ${MAPPING_TOOL} == "TOPHAT2" ]; then
    tophat2_func "${FORWARD_RRNA} ${REVERSE_RRNA}" ${ODIR} ${LOGDIR}
    
elif [ ${MAPPING_TOOL} == "STAR" ]; then
    star_func "${FORWARD_RRNA} ${REVERSE_RRNA}" ${ODIR} ${LOGDIR}
   
else
    die "Mapping tool not supported !"
fi

BAM_INPUT=${ODIR}/mapping/$(basename $FORWARD_RRNA | sed -e 's/.fastq\(.gz\)*/.bam/')

## 4 - Check data type

rseqc_func "${BAM_INPUT}" ${ODIR} ${LOGDIR}

## 5 - Check number of duplicates

markdup "${BAM_INPUT}" ${LOGDIR}

## 6 - Count per transcripts

if [ ${COUNT_TOOL} == "HTSEQ" ]; then
    htseq_func "${BAM_INPUT}" ${ODIR} ${LOGDIR}

elif [ ${COUNT_TOOL} == "FEATURECOUNTS" ]; then
    featurecounts_func "${BAM_INPUT}" ${ODIR} ${LOGDIR}

elif [[ ${COUNT_TOOL} == "STAR" && ${MAPPING_TOOL} == "STAR" ]]; then
    starcounts_func "${BAM_INPUT}" ${ODIR} ${LOGDIR}

elif [[ ${COUNT_TOOL} == "STAR" && ${MAPPING_TOOL} != "STAR" ]]; then
    die "Invalid parameter - STAR cannot be used !"

elif [[ ${COUNT_TOOL} != "STAR" ]]; then
    die "$COUNT_TOOL is not supported !"
fi

## 7 - QC/Stats

mapping_stat "${FORWARD} ${REVERSE}" ${CONF} ${BAM_INPUT} ${R_RNA_BAM} ${ODIR} ${LOGDIR}
echo
echo -e "Done ! Results are available in ${ODIR}"
