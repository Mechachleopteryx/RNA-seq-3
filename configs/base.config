/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  container = params.container

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  //errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  errorStrategy = 'retry' 
  maxRetries = 1

  // Process-specific resource requirements
  withName:fastqc {
    cpus = { check_max (2, 'cpus')}
    memory = { check_max( 500.MB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName:rRNA_mapping {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:prep_rseqc {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName:rseqc {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 500.MB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName:parse_infer_experiment {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 50.MB, 'memory' ) }
    executor = 'local'
  }
  withName:star {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:tophat2 {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:hisat2Align {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:hisat2_sortOutput {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
 withName:preseq {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 200.MB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:markDuplicates {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:dupradar {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:featureCounts {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:HTseqCounts {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:merge_counts {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:read_distribution {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:exploratory_analysis {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:multiqc {
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName:get_software_versions {
    memory = { check_max( 500.MB, 'memory' ) }
  }
  withName:output_documentation {
    memory = { check_max( 500.MB, 'memory' ) }
  }
  withName:workflow_summary_mqc {
    cpus = { check_max (1, 'cpus') }
    memory = { check_max( 100.MB, 'memory' ) }
    executor = 'local'
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  //igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_base = '/data/annotations/pipelines/'
}
