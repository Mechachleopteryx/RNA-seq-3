#!/bin/bash

## RNA Research Pipeline
## Copyleft 2017 Institut Curie
## Author(s): Nicolas Servant
## Contact: nicolas.servant@curie.fr
## This software is distributed without any guarantee under the terms of the GNU General
## Public License, either Version 2, June 1991 or Version 3, June 2007.

                                                                   
SOFT="RNApip_cluster"
PWD=$(dirname $0)
VERSION=$(bash $PWD/RNApip -v)
runKDIExport=0

function usage {
    echo -e "usage : $SOFT -i SAMPLE_PLAN -o OUTPUT -c CONFIG [-m METADATA] [-n RUN_ID] [-k] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo 
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   -i|--input INPUT: sample plan with the list of sample to run in parallel"
    echo "   -o|--output OUTPUT: output folder"
    echo "   -c|--conf CONFIG: configuration file for RNA processing"
    echo "   [-m|--meta] METADATA: Metada related to sequencing run"
    echo "   [-n|--run] RUNID: Id of the run - used as a prefix of the report name"
    echo "   [-k|--kdi]: Generate KDI export file(s)"
    echo "   [-h|--help]: help"
    exit;
}

function version {
    echo -e "$VERSION"
    exit
}

function setKDIExport {
    runKDIExport=1
}

if [ $# -lt 1 ]
then
    usage
    exit
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--input") set -- "$@" "-i" ;;
      "--output") set -- "$@" "-o" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--meta")   set -- "$@" "-m" ;;
      "--run")   set -- "$@" "-n" ;;
      "--kdi")   set -- "$@" "-k" ;;
      "--version")   set -- "$@" "-v" ;;
      "--help")   set -- "$@" "-h" ;;
      *)        set -- "$@" "$arg"
  esac
done

RUNID="__"
while getopts "i:o:c:m:n:kvh" OPT
do
    case $OPT in
        i) SPLAN=$OPTARG;;
	o) ODIR=$OPTARG;;
	c) CONF=$OPTARG;;
	m) META=$OPTARG;;
	n) RUNID=$OPTARG;;
	k) setKDIExport;;
	v) version ;;
	h) help ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	     exit 1
	     ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

##STOPIFNOT
if [[ -z $SPLAN || -z $ODIR || -z $CONF ]]; then
    usage
    exit
fi

## Set PATHS
BIN_PATH=`dirname $0`
ABS_BIN_PATH=`cd "$BIN_PATH"; pwd`
SCRIPTS_PATH="$ABS_BIN_PATH/../scripts/"

## Set absolute path
CONF=$(realpath $CONF)
ODIR=$(realpath $ODIR)
SPLAN=$(realpath $SPLAN)

## Load functions file
. ${SCRIPTS_PATH}/utils.inc.sh

if [ -e "$CONF" ]; then
    read_config $CONF
    if [ -z ${NB_PROC} ]; then NB_PROC=6; fi
    if [ -z ${SUB_MEM} ]; then SUB_MEM="50gb"; fi
    if [ -z ${SUB_WALLTIME} ]; then SUB_WALLTIME="24:00:00"; fi
    if [ -z ${SUB_QUEUE} ]; then SUB_QUEUE="batch"; fi
else
    die "Error - config file '$CONF' not found"
fi

## Run the pipeline in parallel
arraycmd=""
dependcmd="afterok"
N_SAMPLE=$(grep -v "^#" $SPLAN | sed '/^$/d' | wc -l)
if [[ ${N_SAMPLE} -gt 1 ]]; then
    arraycmd="-t 1-${N_SAMPLE}"
    dependcmd="afterokarray"
fi

pid=$(echo "bash ${SCRIPTS_PATH}/run_qsub.sh" | qsub  -m ae -j oe -q ${SUB_QUEUE} -N ${SOFT} -l "nodes=1:ppn="${NB_PROC}",mem="${SUB_MEM}",walltime="${SUB_WALLTIME} ${arraycmd} -v SAMPLE_PLAN="${SPLAN}",ODIR="${ODIR}",CONFIG="${CONF}")
jobidarray=${pid%%.*}

if [ $runKDIExport == 1 ]; then
    exportCMD="${SCRIPTS_PATH}/makeExportFiles.sh -c ${CONF} -o ${ODIR}"
else
    exportCMD=""
fi

## Run the report
if [[ -z $META ]]; then
    pid=$(echo "bash ${ABS_BIN_PATH}/makeRNAreport -i ${ODIR} -c ${CONF} -s ${SPLAN} -n ${RUNID}; ${exportCMD}" | qsub -m ae -j oe -q ${SUB_QUEUE} -N ${SOFT} -l "nodes=1:ppn=1,mem=2gb,walltime=01:00:00" -W depend=${dependcmd}:${jobidarray})
else
    META=$(realpath $META)
    pid=$(echo "bash ${ABS_BIN_PATH}/makeRNAreport -i ${ODIR} -c ${CONF} -s ${SPLAN} -m ${META} -n ${RUNID}; ${exportCMD}" | qsub -m ae -j oe -q ${SUB_QUEUE} -N ${SOFT} -l "nodes=1:ppn=1,mem=4gb,walltime=01:00:00" -W depend=${dependcmd}:${jobidarray})
fi
echo "Job(s) [$pid] submitted to the cluster !"
exit 0

