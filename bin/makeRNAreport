#!/bin/bash

## RNA Research Pipeline
## Copyleft 2017 Institut Curie
## Author(s): Nicolas Servant
## Contact: nicolas.servant@curie.fr
## This software is distributed without any guarantee under the terms of the GNU General
## Public License, either Version 2, June 1991 or Version 3, June 2007.

                                                                   
SOFT="makeRNAreport"
VERSION="0.1.0"

function usage {
    echo -e "usage : $SOFT -i INPUT_DIRECTORY -c CONFIG -s SAMPLE_PLAN [-o OUTPUT] [-n PROJECT_NAME] [-m METADATA] [-d] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo 
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   -i|--idir INPUT_DIRECTORY: input directory"
    echo "   -s|--splan SAMPLE_PLAN: sample plan"
    echo "   -c|--conf CONFIG: configuration file for RNA processing"
    echo "   [-o|--odir OUTPUT_DIR: output folder. Default is INPUT_DIRECTORY/report"
    echo "   [-n|--name]: Project name"
    echo "   [-m|--meta]: Metadata of sequencing run"
    echo "   [-d|--dryrun]: dry run mode"
    echo "   [-h|--help]: help"
    echo "   [-v|--version]: version"
    exit
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}

function set_dry_run {
    DRY_RUN=1
}

function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

if [ $# -lt 1 ]
then
    usage
    exit
fi

## Init optional values
META=""
PROJNAME="__"

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--idir") set -- "$@" "-i" ;;
      "--splan")   set -- "$@" "-s" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--name")   set -- "$@" "-n" ;;
      "--odir")   set -- "$@" "-o" ;;
      "--meta")   set -- "$@" "-m" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts "i:s:c:o:n:m:dhv" OPT
do
    case $OPT in
        i) IDIR=$OPTARG;;
	s) SPLAN=$OPTARG;;
	c) CONF=$OPTARG;;
	o) ODIR=$OPTARG;;
	n) PROJNAME=$OPTARG;;
	m) META=$OPTARG;;
	d) set_dry_run ;;
	v) version ;;
	h) help ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	     exit 1
	     ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

if [[ -z $IDIR || -z $CONF || -z $SPLAN ]]; then
    usage
    exit
fi

## Set PATHS
BIN_PATH=$(dirname $0)
ABS_BIN_PATH=$(cd "$BIN_PATH"; pwd)
SCRIPTS_PATH="$ABS_BIN_PATH/../scripts/"
IDIR=$(realpath $IDIR)
CONF=$(realpath $CONF)
SPLAN=$(realpath $SPLAN)

## Load functions file
. $SCRIPTS_PATH/utils.inc.sh

## Check Config file
if [ -e "$CONF" ]; then
    read_config $CONF
else
    echo "Error - config file '$CONF' not found"
    exit
fi

## output
if [ -z ${ODIR} ];then
    output_path=${IDIR}/report
else
    output_path=${ODIR}
fi

logdir=${output_path}/logs
mkdir -p ${output_path}
mkdir -p ${logdir}


## Init log
echo -e "--------------------"
echo -e "RNAreport"
when=$(date +%Y-%m-%d)
echo -e "Date: ${when}"
where=$(hostname)
echo -e "Host: ${where}"
echo -e "Input_directory: ${IDIR}"
echo -e "Project_name: ${PROJNAME}"
echo -e "Sample_plan: ${SPLAN}"
echo -e "Config: ${CONF}"
if [[ ! -z $META ]]; then
    echo -e "Meta: ${META}"
fi
echo -e "--------------------"
echo 


## copy configuration file into the report folder and combine stats
echo -e "Combine stats from multiple samples ..."
echo -e "Logs: ${logdir}/getstat.log"
echo
cmd="cp ${CONF} ${output_path}/config.txt"
exec_cmd ${cmd} > $logdir/getstat.log 2>&1

statfiles=$(find ${IDIR} -maxdepth 3 -name '*stats' -type f)
if [[ $statfiles == "" ]]; then die "Not *stats files detected. Exit."; fi
cmd="${PYTHON_PATH}/python ${SCRIPTS_PATH}/fullStats.py -i $statfiles -o ${output_path} -r ${PROJNAME}"
exec_cmd ${cmd} >> $logdir/getstat.log 2>&1

## Generate merged table count
echo -e "Combine merged table counts ..."
echo -e "Logs: ${logdir}/makeCountTable.log"
echo
cmd="${R_PATH}/R --no-save --no-restore -e \"input_path='${IDIR}'; gtf='${TRANSCRIPTS_GTF}'; count_tool='${COUNT_TOOL}'; stranded='${STRANDED}'; odir='${output_path}'; source('${SCRIPTS_PATH}/makeCountTable.R', chdir=TRUE)\"" 
exec_cmd ${cmd} > $logdir/makeCountTable.log 2>&1

## Run RNA sequencing report
echo -e "Generate report ..."
echo -e "Logs: ${logdir}/report.log"
echo
cmd="${R_PATH}/R --no-save --no-restore -e \"input_path='${IDIR}'; output_path='${output_path}'; species='${ORG}'; build='${BUILD}'; gtf='${TRANSCRIPTS_GTF}'; meta='${META}'; splan='${SPLAN}'; rmarkdown::render('${SCRIPTS_PATH}/report.Rmd', intermediates_dir='${output_path}', output_file='${output_path}/report.html')\"" 
exec_cmd ${cmd} > $logdir/report.log 2>&1

#cmd="${R_PATH}/R --no-save --no-restore -e \"input_path='${IDIR}'; output_path='${output_path}'; species='${ORG}'; build='${BUILD}'; gtf='${TRANSCRIPTS_GTF}'; meta='${META}'; rmarkdown::render('${SCRIPTS_PATH}/report.Rmd', intermediates_dir='${output_path}', output_file='${output_path}/report.pdf', output_format='pdf_document')\""
#echo $cmd
#eval $cmd
#render("input.Rmd", "all")
