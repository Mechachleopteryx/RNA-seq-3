/*
 * -------------------------------------------------
 *  nfcore/rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  name = 'rnaseq'
  description = 'RNA-Seq analysis pipeline'
  homePage = 'https://gitlab.curie.fr/rnaseq'
  author = 'Institut Curie - Bioinformatics platform'
  version = '2.0.0dev'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

// Global default params, used in configs
params {
  container = '' 
  help = false

  name = false
  project = false
  aligner = 'star'
  counts = 'star'
  stranded = 'auto'

  genome = false
  splicesites = false

  saveReference = false
  saveTrimmed = false
  saveAlignedIntermediates = false
  singleEnd = false
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'
  email = false
  plaintext_email = false
  seqCenter = false
  featureCounts = false
  HTseqCounts = false
 
  skip_qc = false
  skip_rrna = false
  skip_fastqc = false
  skip_rseqc = false
  skip_read_dist = false
  skip_preseq = false
  skip_dupradar = false
  skip_expan = false
  skip_multiqc = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  metadata = "$baseDir/assets/metadata.tsv"

  // Defaults
  sampleLevel = false
  clusterOptions = false
  subsampFilesizeThreshold = 10000000000 // Don't subsample BAMs for RSeQC gene_body_coverage if less than this
  maxMultiqcEmailFileSize = 25.MB
  readPaths = null
  tracedir = "${params.outdir}/pipeline_info"
  star_memory = false // Cluster specific param required for hebbe
}

// Default option for RNA-seq pipeline 
params {
  //MAPPING OPTIONS
  bowtie_opts = "-v 2 -a -m 1 --best --strata --nomaqround -y"
  star_opts = "--outFilterType BySJout --outFilterMultimapNmax 20 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04 --alignIntronMin 20 --alignI\ntronMax 1000000 --alignMatesGapMax 1000000 --outSAMprimaryFlag OneBestScore --outMultimapperOrder Random --outSAMattributes All"
  tophat2_opts = "--b2-sensitive -g 1 -N 2 --no-coverage-search"

  //COUNTS OPTIONS
  htseq_opts = "-f bam -t exon -r pos"
  featurecounts_opts = "-t exon -C -p"
  star_opts_counts = "--quantMode GeneCounts"

  //check library strandedness; default sampling is 200000 reads with mapq>30
  n_check = 200000
}

// Additional configs
includeConfig 'configs/base.config'
includeConfig 'configs/igenomes.config'


// Profiles
profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  curie {
    includeConfig 'configs/curie.config'
  }
  test {
   includeConfig 'configs/test.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// TODO - check if necessary
timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_DAG.pdf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
